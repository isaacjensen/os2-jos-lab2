Question 1: Assuming that the following JOS kernel code is correct, what type should
variable x have, uintptr_t or physaddr_t?

Since return_a_pointer() returns a char* which is a virtual address, the type should be uintptr_t. 

Question 2: What entries (rows) in the page directory have been filled in at this point?
What addresses do they map and where do they point? In other words, fill out this table
as much as possible:

Entry   Base Virtual Address    Points to (logically)
1023    0xffc00000              Page table for top 4MB of physical memory
1022    0xff800000              Page table for second top 4MB of phyical memory
.       
960     0xf0000000              Page table for first 4MB of phy memory
959     0xefc00000              Page table for bootstack (second half not mapped)
958     0xef800000              Page table for memory-mapped I/O
957     0xef400000              Page table for second part of phy addr of pages
956     0xef000000              User pages
.                              
2       0x00800000              
1       0x00400000              
0       0x00000000              (next question)


Question 3: We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernel’s memory? What specific
mechanisms protect the kernel memory?

User programs won't be able to because pages belonging to the kernel have the PTE_U bit set to 0. This means that if a program tries to read that page, the CPU will send a page fault and transfer control to the operating system. 


Question 4: What is the maximum amount of physical memory that this operating system can support? Why? 

The maximum amount of physical memory is 268 MB. This is because the OS maps all RAM on the last 268MB. 


Question 5: How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?

There is 4MB for struct PageInfo, 2MB for pagetables and 4KB for pagedir. The total overhead is 1024 * 6 + 4  6144+4 == 6148 KB.


Question 6: Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?

We transition into running at an EIP above KERNBASE inside entry.S. What makes it possible is mapping the 4MB of RAM to VA’s 0x00000000 and 0xF0000000. This transition in necessary because there are more instructions that must be ran to jump into a place above KERNBASE.  	
